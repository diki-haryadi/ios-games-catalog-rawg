# name: iOS starter workflow
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
# jobs:
#   build:
#     name: Build and Test default scheme using any available iPhone simulator
#     runs-on: macos-14 # macOS Sonoma, yang mendukung Xcode 16.2
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Select Xcode 16.2
#         run: |
#           sudo xcode-select -s /Applications/Xcode_16.2.app
#           xcodebuild -version # Verifikasi versi Xcode yang digunakan
      
#       - name: Install CocoaPods dependencies
#         run: |
#           if [ -f "Podfile" ]; then
#             pod install
#           fi
        
#       - name: List project files
#         run: |
#           ls -la
#           find . -name "*.xcodeproj" -o -name "*.xcworkspace"
        
#       - name: Set Default Scheme
#         run: |
#           # Cari file proyek
#           if [ -d "*.xcworkspace" ]; then
#             file_to_build=$(find . -name "*.xcworkspace" -maxdepth 1 | head -1)
#             filetype_parameter="workspace"
#           else
#             file_to_build=$(find . -name "*.xcodeproj" -maxdepth 1 | head -1)
#             filetype_parameter="project"
#           fi
          
#           echo "Using $filetype_parameter: $file_to_build"
          
#           # Dapatkan skema langsung dari xcodebuild
#           set +e
#           schemes=$(xcodebuild -list -"$filetype_parameter" "$file_to_build" 2>/dev/null | grep -A 10 "Schemes:" | grep -v "Schemes:" | grep -v '^$' | sed 's/^[ \t]*//')
#           if [ $? -ne 0 ] || [ -z "$schemes" ]; then
#             # Fallback ke nama proyek
#             scheme_name=$(basename "$file_to_build" | sed 's/\.[^.]*$//')
#           else
#             # Gunakan skema pertama
#             scheme_name=$(echo "$schemes" | head -1)
#           fi
#           set -e
          
#           echo "$scheme_name" > default
#           echo "Using scheme: $scheme_name"
          
#       - name: List available simulators
#         run: xcrun simctl list devices available
          
#       - name: Build
#         env:
#           platform: ${{ 'iOS Simulator' }}
#         run: |
#           scheme=$(cat default)
#           echo "Building scheme: $scheme"
          
#           # Cari file proyek
#           if [ -d "*.xcworkspace" ]; then
#             file_to_build=$(find . -name "*.xcworkspace" -maxdepth 1 | head -1)
#             filetype_parameter="workspace"
#           else
#             file_to_build=$(find . -name "*.xcodeproj" -maxdepth 1 | head -1)
#             filetype_parameter="project"
#           fi
          
#           # Gunakan simulator iPhone terbaru
#           device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
#           echo "Using device: $device"
          
#           # Build dengan parameter yang diperlukan
#           xcodebuild build-for-testing \
#             -scheme "$scheme" \
#             -"$filetype_parameter" "$file_to_build" \
#             -destination "platform=$platform,name=$device" \
#             -allowProvisioningUpdates \
#             CODE_SIGN_IDENTITY="" \
#             CODE_SIGNING_REQUIRED=NO \
#             CODE_SIGNING_ALLOWED=NO
          
#       - name: Test
#         if: success()
#         env:
#           platform: ${{ 'iOS Simulator' }}
#         run: |
#           scheme=$(cat default)
          
#           # Cari file proyek
#           if [ -d "*.xcworkspace" ]; then
#             file_to_build=$(find . -name "*.xcworkspace" -maxdepth 1 | head -1)
#             filetype_parameter="workspace"
#           else
#             file_to_build=$(find . -name "*.xcodeproj" -maxdepth 1 | head -1)
#             filetype_parameter="project"
#           fi
          
#           # Gunakan simulator iPhone terbaru
#           device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          
#           # Jalankan tes
#           xcodebuild test-without-building \
#             -scheme "$scheme" \
#             -"$filetype_parameter" "$file_to_build" \
#             -destination "platform=$platform,name=$device" \
#             -allowProvisioningUpdates \
#             CODE_SIGN_IDENTITY="" \
#             CODE_SIGNING_REQUIRED=NO \
#             CODE_SIGNING_ALLOWED=NO
